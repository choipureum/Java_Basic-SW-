< 멀티 스레드, Multi-Thread > 

  - 프로그램 , Program : 
	실행 파일(exe 파일)
	하드디스크에 저장되어있는 상태

  - 프로세스, Process : 
	실행중인 프로그램
	메모리(RAM)에 실행상태로 로드된 프로그램
	
  - 스레드, Thread
	프로세스의 작업 단위(실행 가능 단위)

  - 멀티스레드, Multi-Thread(java API가 제공)
	스레드가 여러 개인 프로세스 상태

  - 멀티프로세스, Multi-Process
	프로세스가 여러개인 프로그램	
	
  - 프로세서, Processor
	프로세스를 동작시키는 장치, CPU
  
  - 멀티프로세서, Multi Processor
	다중 처리 컴퓨터 
	프로세서가 여러개인 시스템(컴퓨터)
	
  - 멀티코어 프로세서
	코어가 여러 개인 프로세서

		듀얼코어
		쿼드코어
		헥사코어
		...

  < 멀티 스레딩 관련 클래스 > 
	
	- interface Runnable
		run() 추상 메소드를 가지고 있음
		run() 메소드는 스레드화 될 수 있는 코드를 정의할 수 있다
		
		
	- class Thread implements Runnable
		run()메소드를 가지고 있다
		스레드를 제어하고, 관리하는 메소드들을 가지고 있다
		스레드의 정보를 확인할 수 있도록 해준다
 		스레드를 실행시킬 수 있다 - start()메소드 이용

 < 스레드 동기화, Thread Synchronization > 
	: Thread-safe하다

	- 여러 스레드나 하나의 같은 자원에 접근하려고 시도하는 경우
	동시에 자원에 접근하는 상황을 막기 위한 처리
	
	- 스레드가 자원에 접근하면 다른 스레드가 접근할 수 없도록 LOCK을 건다
	- 작업이 완료되면 LOCK을 풀어준다

 < 임계 영역, Critical Section >

	- 동기화 처리 영역
	- LOCK이 걸리는 영역
	- 여러 스레드들이 자원에 동시에 접근하는 것을 막은 영역
	- 자바에서는 synchronized 키워드를 이용하여 구현된다

	- 임계영역 객체 단위로 만들어진다
	- 같은 클래스 타입이더라도 다른 객체라면 서로 다른 임계영역을 가지고 있다

	ex) 
	vector v1;
	main(){v1.add(10);}     ---> 하나가 들어가면 하나는 기다린다
	run(){v1.add(20);}

 <  동기화 영역 설정 방법 >

	- 동기화 메소드(synchronized 추가)
		[접근제한자] synchronized [리턴타입] 메소드명 (매개변수){
		}
		->메소드가 임계영역이 된다
		한번에 하나의 스레드만 해당 메소드를 사용할 수 있게 된다

	- 동기화 블록
		중괄호 블록{}에 synchronized 키워드를 붙인 것

		synchronized(객체){
			//임계영역
			//동기화 처리 코드
		}

	ex) public class Test{
		private int data;
		
		//호출자체에서 동기화처리
		public synchronized void out(){
			
			}
		}
		//들어와서 밑줄 싱크로나이즈드에서 동기화처리
		public print(){
			synchronized(객체(ex)this)){
			}
		}

< 임계영역(동기화영역)의 LOCK 상태 통지(알림) 메소드 >

  -wait(), notify(), notifyAll()

  - 반드시 임계영역 내에서 호출해야 한다

  - 임계영역에 접근할 수 있는 권한(LOCK)의 상태를 알리는 메소드이다

  	-wait()
		: 빠져나오긴하지만 종료X, 대기( LOCK반납 )
		notify 신호통지를 기다리는 상태가 된다
		wait()을 호출한 스레드는 BLOCKED 상태가 된다

	-notify()
		: 대기상태의 임의의 스레드에게 LOCK 상태를 통지한다

	-notifyAll()
		: 대기 상태의 모든 스레드에게 LOCK 상태를 통지한다

	notify(),notifyAll()->임계영역에 대한 LOCK이 반납되었음을 알린다


 + 동기화 주의사항

  - 공정성, Fairness
	모든 스레드가 자원에 접근할 기회를 공정하게 받아야한다

  - 기아상태, Starvation
	자원에 대한 접근 기회를 얻지 못하는 스레드의 상태

  - 교착상태, Deadlock
	 스레드들이 서로 상대방이 사용중인 자원을 필요로하는데
	서로 반납하지 않는 상황

  - 경쟁상태, Race Condition
	 스레드들이 서로 자원 접근권한(LOCK)을 얻기 위해
	경쟁하는 상태 ( 스케줄링 )











