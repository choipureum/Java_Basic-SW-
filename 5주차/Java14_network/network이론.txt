< 노드의 구분 >
  - 노드(컴퓨터)들의 역할을 고려해서 구분
  
  - 서버(Server) : 다른 노드에게 서비스를 제공하는 노드
  - 클라이언트(Client) : 서비스를 이용하는 (제공받는) 노드

  - 전용서버를 두는 방식을 CS방식이라고 한다( Client - Server )
  - 서버, 클라이언트 역할 구분이 없으면 P2P라고 한다(Peer to Peer)

     ** CS방식 : Cliest -Server 모델
	: 서버기반 네트워크 모델
	  서버시스템 구축과 관리에 비용이 많이 든다
	  안정적인 서비스를 제공할 수 있다
	  데이터의 관리와 보안이 수월하다

     ** P2P방식 : Peer To Peer 모델
	: 서버구축, 운용, 관리비용을 절감할 수 있다.
	  자원의 활용이 극대화할 수 있다
	  자원에 대한 관리가 어렵다
	  보안에 취약하다

< 프로토콜, Protocol : 통신규약 >
 
 - 통신방식, 전송 데이터의 형식, 노드의 주소 표현방식 등을 정의한다
 - 대표적으로 TCP/IP Protocol이 있다
 
< TCP/IP Protocol > 
 - Transmission Control Protocol / Internet Protocol 
 - TCP : 연결(전송) 제어 프로토콜
 - IP : 인터넷 프로토콜, 노드위치

< TCP, 연결제어 프로토콜 >
 - 네트워크를 통해 데이터를 어떻게 전달할 것인가에 대한 규약
 - 전달데이터를 작은 조각으로 나누거나 재조립하는 방식에 대한 규약
 - 잘게 나눈 조각을 '패킷'(Packet)이라고 한다
 - 네트워크로 한번에 큰 데이터를 전송하는 것이 현실적으로 부적절하므로 작은 데이터단위(패킷)으로 나누어서 전송하게 된다

 - 패킷을 전송하는 방식에 따라 TCP, UDP로 나뉜다
 - UDP에서는 패킷을 데이터그램이라고 부른다

	** UDP : User Datagram Protocol

< TCP vs UDP >

 - TCP : 연결지향형, 신뢰성 있는 통신, 안정성
 - UDP : 비연결지향형, 신뢰성 없는 통신, 속도, 실시간 통신

 - 연결지향 : 노드들의 연결을 데이터 전송 전에 우선적으로 수행한다
 - 신뢰성 : 데이터 통신 중 패킷의 손실여부를 체크한다(손실 시 재전송)
 - UDP는 TCP보다 전송속도가 빠르다
 - TCP는 패킷의 전송순서가 중요할 때 사용(안정성)
 - UDP는 데이터의 전송 속도가 중요할 때 사용(실시간)
 - 패킷마다 IP주소가 부여된다
 
< 인터넷 프로토콜, IP > 
 
 - 노드의 위치를 표현하는 방법에 대한 규약
 - 패킷이 전송된 곳(Sender, Source)과 전송될 곳(Receiver, Destination)을 구분할 수 있게 해준다
 
< 윈도우 콘솔 명령어 , 명령프롬프트 >

 - ipconfig : 컴퓨터에 설정된 TCP/IP 네트워크 설정값 확인 (IP주소를 볼 수 있다)
 - path : 환경변수의 path 항목 확인
 - cls : Clear Screen , 콘솔 창 내용 지우기
 - dir : Directory, 현재 디렉토리의 파일과 폴더 내용을 목록으로 보여줌
 - cd : Change Directory, 현재 디렉토리를 확인하거나 변경함 (cd workSpace 이렇게 입력하면 \workSpace가 추가됨)

< TCP/IP Protocol에서 사용하는 주소 > 
 
 - IP Address
	노드의 위치를 나타내는 주소
	각 노드를 구분하는 데 사용한다
	IP Protocol에서 형식을 정의한다
	
	32bit DWORD 타입
	(DWORD : 부호가 없는 정수, unsigned int, 4바이트 양의 정수)
	각 1바이트를 4자리로 나눠서 표현
	0~255.0~255.0~255.0~255

	ex) 192.168.20.105

 - PortNumber(Address)
	노드 내부의 서비스 종류, 형태

	서비스의 위치
	논리적인 접속 위치
	TCP Protocol에서 형태를 정의한다

	16bit DWORD(2바이트 양의 정수)
	0~65535 내에서 표현된다

	IP주소 뒤에 : 붙이고 뒤에 삽입한다

	ex) 192.168.20.105:8888

  **Well-Known Port, 잘 알려진 포트 번호
	0~1023 번
	자주 사용되는 서비스에 일반적으로 부여되는 포트번호
	
	80 : WEB Service, HTTP
	443 : 보안 WEB Service, HTTPS,HTTP over SSL
	21 : 파일 전송 프로토콜, FTP
	25 : 메일 전송 프로토콜, SMTP
	53 : 도메인 네임 시스템 , DNS

< 네트워크 관련 클래스 >

  + InetAddress class
	- IP 정보 관리 클래스
	- 생성자 없음
	- 직접 객체생성 불가
	- 정적메소드를 이용하여 정보를 얻어와야 함

 	**localhost
	  가상 루프백(loopback) 호스트 (자기자신)
	  루프백 호스트네임 : localhost
	  루프백 IP: 127.0.0.1
	  네트워크 상에서 자기가 자기 자신을 나타낼 때 사용
	  테스트용,개발용으로 많이 사용한다

  + URL class

  	- URL 정보를 관리하는 클래스

	- URL, Uniform Resource Locator 
		인터넷 상 정보(자원, Resource)가 어디있는지 표현하는 방법
		인터넷에 존재하는 자원에 접근할 수 있는 주소로 사용된다
		
	
	- URL형식
		프로토콜://인터넷주소[:포트번호][/디렉토리][/파일이름]][?쿼리스트링][#참조]
		ex)http://192.168.20.105:8888/share/프로그램/ChromeSetup.exe

	+ 프로토콜 : 자원에 접근하기 위해 사용된 통신규약
	+ 인터넷주소 : 자원을 가지고 있는 서버의 주소
	+ 포트번호 : 통신에 사용된 포트번호
	+ 디렉토리,파일이름 : 자원이 저장되어 있는 서버 내의 파일 위치
	+ 쿼리스트링 : ?문자 뒤에 작성하는 통신용 매개변수(전달인자)
	+ 참조 : # 문자 뒤에 작성하는 문서 내 참조 위치


< 소켓, Socket >
  - sw적인 통신 접속지점, 가상장치

  - 통신에서 필요한 절차를 프로그램으로 직접 구현하지 않아도 네트워크 프로그램을 개발할 수 있도록 만들어진 API
  - 자바에서는 클래스로 제공된다
  - 데이터 패킷화, 패킷마다 IP부여하기, 네트워크를 통한 패킷 전달 등의 과정을 알아서 처리해준다


< 소켓 통신 >
  - 서버 소켓과 클라이언트 소켓을 이용하여 서로 통신하는 것
  
  - 소켓 프로그래밍
  - TCP 프로그래밍
  - 네트워크 프로그래밍

   //UDP는 다루지 않고 TCP만 볼것이다
  - 서버 소켓 : ServerSocket class(TCP), DatagramSocket class(UDP)
  - 클라이언트 소켓 : Socket class(TCP), DatagramPacket class(UDP)









